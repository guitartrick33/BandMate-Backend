# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

#
#name: Java CI with Maven & Deployment
#
#on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
#
#permissions:
#  contents: read
#
#jobs:
#  build:
#    name: Build
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK 11
#        uses: actions/setup-java@v2
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          cache: maven
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml -Dmaven.test.skip=true
#
#  - name: Auth
#      id: 'auth'
#      uses: 'google-github-actions/auth@v0'
#      with:
#        credentials_json: '${{ secrets.GCP_KEY }}'
#        create_credentials_file: true
#
#      # Setting up tools for iteracting with google cloud services
#      - name: 'Set up Cloud SDK'
#        uses: 'google-github-actions/setup-gcloud@v0'
#
#      #Chech google cloud connection
#      - name: 'Use gcloud CLI'
#        run: 'gcloud info'
#
#      - name: Build and push to Artifact registry
#        working-directory: bandmate-auth
#        run: |
#          gcloud auth login --brief --cred-file=${{ steps.auth.outputs.credentials_file_path }}
#          gcloud auth configure-docker europe-west4-docker.pkg.dev
#          docker build -t europe-west4-docker.pkg.dev/bandmate-backend/bandmate-auth/bandmate-auth:latest .
#          docker push europe-west4-docker.pkg.dev/bandmate-backend/bandmate-auth/bandmate-auth:latest


name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: bandmate-backend
  GKE_CLUSTER: bandmate-auth    # Add your cluster name here.
  GKE_ZONE: eu-west4-a   # Add your cluster zone here.
  DEPLOYMENT_NAME: bandmate-auth # Add your deployment name here.
  IMAGE: bandmate-auth/bandmate-auth

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: a74cb9c8155220d813cd2110f40639248caadcd6
          project_id: bandmate-backend

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: a74cb9c8155220d813cd2110f40639248caadcd6

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide